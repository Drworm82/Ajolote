import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Volume2, VolumeX, Share2, Info, RotateCw, Shuffle, Sparkles } from 'lucide-react'
import Button from '@/components/ui/button'
import CoinDisplay from '@/components/coin/CoinDisplay'

const PHRASES = {
  fortune: [
    "Tu calma abre caminos bajo el agua",
    "La fortuna nada hacia ti con gracia",
    "Hoy el universo susurra tu nombre",
    "Las estrellas se alinean en tu favor",
    "Tu energ√≠a atrae bendiciones",
    "El ajolote te gu√≠a hacia la abundancia",
    "Las aguas claras revelan oportunidades",
    "Tu paciencia ser√° recompensada",
    "Hoy es tu d√≠a de brillar",
    "La suerte fluye como corriente a tu lado",
    "Conf√≠a: el camino se ilumina",
    "Tu sonrisa abre puertas doradas",
    "El destino te sonr√≠e desde las profundidades",
    "Hoy cosechar√°s lo que sembraste",
    "La magia est√° de tu lado",
    "Tu coraz√≥n conoce el camino correcto",
    "Las coincidencias son gui√±os del universo",
    "Hoy recibir√°s noticias que alegrar√°n tu alma",
    "Tu luz interior ilumina todo a tu paso",
    "El ajolote ancestral te bendice"
  ],
  reflection: [
    "Paciencia: lo bueno se cocina lento",
    "Respira hondo, la tormenta pasar√°",
    "A veces no hacer nada es hacer mucho",
    "Tu fortaleza est√° en tu quietud",
    "Las aguas tranquilas esconden tesoros",
    "Conf√≠a en el proceso de la vida",
    "El silencio tambi√©n es una respuesta",
    "Date tiempo para regenerarte",
    "No todo requiere una respuesta inmediata",
    "Tu intuici√≥n te guiar√° cuando est√©s listo",
    "Aprende del ajolote: la calma es poder",
    "Observa m√°s, juzga menos",
    "El universo tiene su propio ritmo",
    "Hoy es d√≠a de cuidarte a ti mismo",
    "La respuesta llegar√° en su momento",
    "Perm√≠tete sentir sin apresurarte",
    "Tu luz no se apaga por descansar",
    "Las ra√≠ces profundas crecen en silencio",
    "Conf√≠a en tu capacidad de adaptarte",
    "El ajolote te invita a la introspecci√≥n"
  ]
} as const

export default function CoinFlip() {
  const [isFlipping, setIsFlipping] = useState(false)
  const [showAjolote, setShowAjolote] = useState(true)
  const [result, setResult] = useState<null | 'fortune' | 'reflection'>(null)
  const [phrase, setPhrase] = useState('')
  const [soundEnabled, setSoundEnabled] = useState(true)

  useEffect(() => {
    const savedSound = localStorage.getItem('soundEnabled')
    if (savedSound !== null) setSoundEnabled(savedSound === 'true')
  }, [])

  const playSound = () => {
    if (!soundEnabled) return
    try {
      const AudioCtx = (window as any).AudioContext || (window as any).webkitAudioContext
      const ctx = new AudioCtx()
      const osc = ctx.createOscillator()
      const gain = ctx.createGain()
      osc.connect(gain); gain.connect(ctx.destination)
      osc.type = 'triangle'
      osc.frequency.value = 820
      const t = ctx.currentTime
      gain.gain.setValueAtTime(0.001, t)
      gain.gain.linearRampToValueAtTime(0.08, t + 0.03)
      gain.gain.exponentialRampToValueAtTime(0.005, t + 0.28)
      osc.start(t); osc.stop(t + 0.3)
    } catch {}
  }

  const vibrate = (pattern: number | number[]) => {
    if ('vibrate' in navigator) navigator.vibrate(pattern as any)
  }

  const updateStreak = () => {
    const today = new Date().toDateString()
    const last = localStorage.getItem('lastVisit')
    const current = parseInt(localStorage.getItem('streak') || '0', 10)
    if (last === today) return
    const y = new Date(); y.setDate(y.getDate() - 1)
    const next = last === y.toDateString() ? current + 1 : 1
    localStorage.setItem('streak', String(next))
    localStorage.setItem('lastVisit', today)
  }

  const flipManual = () => {
    if (isFlipping) return
    setIsFlipping(true)
    setResult(null)
    setPhrase('')
    playSound(); vibrate(40)
    setTimeout(() => {
      setShowAjolote(prev => !prev)
      setIsFlipping(false)
    }, 600)
  }

  const doVolado = () => {
    if (isFlipping) return
    setIsFlipping(true)
    setResult(null)
    setPhrase('')
    updateStreak()
    playSound(); vibrate(40)

    setTimeout(() => {
      const isAjolote = Math.random() < 0.5
      const category: 'fortune' | 'reflection' = isAjolote ? 'fortune' : 'reflection'
      const pool = PHRASES[category]
      const randomPhrase = pool[Math.floor(Math.random() * pool.length)]
      setShowAjolote(isAjolote)
      setResult(category)
      setPhrase(randomPhrase)
      setIsFlipping(false)
      vibrate([20, 40, 20])
    }, 1200)
  }

  const shareResult = async () => {
    const text = `${result === 'fortune' ? 'ü¶é Fortuna' : 'ü¶Ö Reflexi√≥n'}: "${phrase}"`
    const url = location.href
    if ((navigator as any).share) {
      try { await (navigator as any).share({ text, url }); return } catch {}
    }
    try { await navigator.clipboard.writeText(`${text}\n${url}\n#LaSuerteDelAjolote`); alert('¬°Copiado!') }
    catch { alert(`${text}\n${url}`) }
  }

  const toggleSound = () => {
    const nv = !soundEnabled
    setSoundEnabled(nv)
    localStorage.setItem('soundEnabled', String(nv))
  }

  const isAjolote = result === 'fortune'

  return (
    <div className="min-h-screen flex flex-col p-3">
      <div className="app-card w-full">
        {/* Header */}
        <header className="app-header flex items-center justify-between">
          <div className="flex items-center gap-2 font-bold">
            <span className="text-xl" aria-hidden>ü¶é</span>
            <span>La Suerte del Ajolote</span>
          </div>
          <div className="flex items-center gap-1">
            <Button
              variant="ghost"
              size="icon"
              onClick={toggleSound}
              aria-label={soundEnabled ? 'Desactivar sonido' : 'Activar sonido'}
              className="text-white/90 hover:bg-white/10"
            >
              {soundEnabled ? <Volume2 className="w-5 h-5" /> : <VolumeX className="w-5 h-5" />}
            </Button>
            <Button variant="ghost" size="icon" aria-label="Informaci√≥n" className="text-white/90 hover:bg-white/10">
              <Info className="w-5 h-5" />
            </Button>
          </div>
        </header>

        {/* Moneda */}
        <div className="mt-6">
          <CoinDisplay isFlipping={isFlipping} showAjolote={showAjolote} />
        </div>

        {/* Resultado */}
        <AnimatePresence mode="wait">
          {result && !isFlipping && (
            <motion.div
              initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }}
              className="mt-6"
            >
              <div className="text-center mb-3">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <span className="text-3xl" aria-hidden>{isAjolote ? 'ü¶é' : 'ü¶Ö'}</span>
                  <h2 className={`text-2xl font-bold ${isAjolote ? 'text-amber-600' : 'text-brand-teal'}`}>
                    {isAjolote ? '¬°Fortuna!' : '¬°Reflexi√≥n!'}
                  </h2>
                </div>
              </div>

              <div className={`rounded-2xl p-5 mb-4 shadow-card ${isAjolote ? 'bg-amber-50 border-2 border-amber-200' : 'bg-teal-50 border-2 border-teal-200'}`}>
                <p className="text-center text-base text-gray-800 leading-relaxed italic">
                  "{phrase}"
                </p>
              </div>

              <Button onClick={shareResult} className={`w-full ${isAjolote ? 'bg-amber-600 hover:bg-amber-700' : 'bg-brand-teal hover:bg-teal-800'} text-white font-bold py-4 rounded-full shadow-lg`}>
                <Share2 className="w-5 h-5 mr-2" />
                Compartir resultado
              </Button>

              {isAjolote && (
                <div className="flex justify-center gap-3 mt-4">
                  {[...Array(5)].map((_, i) => (
                    <motion.div
                      key={i}
                      animate={{ y: [0, -8, 0], opacity: [0.5, 1, 0.5] }}
                      transition={{ duration: 2, repeat: Infinity, delay: i * 0.2 }}
                    >
                      <Sparkles className="w-4 h-4 text-amber-500" />
                    </motion.div>
                  ))}
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Botones rojos */}
        <div className="mt-8 grid grid-cols-2 gap-3">
          <Button onClick={flipManual} disabled={isFlipping} className="btn-primary-red">
            <RotateCw className="w-5 h-5 mr-1" />
            Dar la vuelta
          </Button>
          <Button onClick={doVolado} disabled={isFlipping} className="btn-primary-red">
            <Shuffle className="w-5 h-5 mr-1" />
            Volado
          </Button>
        </div>
      </div>
    </div>
  )
}
